include:
  - path: devops/docker-compose/dev-dependencies/docker-compose.authentik.yaml
    env_file: .env

networks:
  intranet:
    internal: false
    driver: bridge

volumes:
  gosvelte-postgres:

services:
  reverse-proxy:
    image: "traefik:v3.3.4"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web-secure.address=:443"
    networks:
      - intranet

  # -----------------------------------------------------------------------------------------------------
  #
  #       FRONTEND
  #
  # -----------------------------------------------------------------------------------------------------

  frontend:
    image: node:latest
    container_name: web-ui
    restart: unless-stopped
    ports:
      - 5173:5173
    volumes:
      - ./services/frontend:/app
    networks:
      - intranet
    environment:
      - BACKEND_URL=http://backend:3000/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`web.localhost`)&&PathPrefix(`/`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
      - "traefik.http.routers.frontend.entrypoints=web,web-secure"
    command: ["sh", "-c", "cd /app && npm install && npm run dev"]

  frontend-tests:
    image: node:latest
    container_name: web-ui-test
    restart: unless-stopped
    volumes:
      - ./services/frontend:/app
    networks:
      - intranet
    command: ["sh", "-c", "cd /app && npm install && npm run test"]

  # -----------------------------------------------------------------------------------------------------
  #
  #       BACKEND
  #
  # -----------------------------------------------------------------------------------------------------

  backend:
    image: golang:latest
    container_name: web-api
    volumes:
      - ./services/backend:/app/backend
      # - ./services/go_app_modules:/app/go_app_modules
      # - ./services/go.work:/app/go.work
      # - ./services/go.work.sum:/app/go.work.sum
    networks:
      - intranet
    # environments:
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - "./.env"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`web.localhost`)&&(PathPrefix(`/api`)||PathPrefix(`/swagger`))"
      - "traefik.http.routers.backend.priority=2"
      - "traefik.http.routers.backend.service=backend"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.routers.backend.entrypoints=web,web-secure"
    command: [
        "sh",
        "-c",
        # "cd /app && go work sync && cd /app/backend && bash scripts/run-local-docker.sh",
        "cd /app/backend && bash scripts/run-local-docker.sh",
      ]

  backend-tests:
    image: golang:latest
    container_name: web-api-test
    volumes:
      - ./services/backend:/app/backend
      # - ./services/go_app_modules:/app/go_app_modules
      # - ./services/go.work:/app/go.work
      # - ./services/go.work.sum:/app/go.work.sum
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    tty: true
    environment:
      - TERM=xterm-256color`
    command: [
        "sh",
        "-c",
        # "cd /app && go work sync && cd /app/backend && bash scripts/test-local-docker.sh",
        "cd /app/backend && bash scripts/test-local-docker.sh",
      ]

  backend-integration-tests:
    image: golang:latest
    container_name: web-api-test
    volumes:
      - ./services/backend:/app/backend
      # - ./services/go_app_modules:/app/go_app_modules
      # - ./services/go.work:/app/go.work
      # - ./services/go.work.sum:/app/go.work.sum
    networks:
      - intranet
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    tty: true
    environment:
      - TERM=xterm-256color`
    command: [
        "sh",
        "-c",
        # "cd /app && go work sync && cd /app/backend && bash scripts/test-local-docker.sh",
        "cd /app/backend && bash scripts/test-local-docker-integrationtests.sh",
      ]

  # -----------------------------------------------------------------------------------------------------
  #
  #       DATABASE
  #
  # -----------------------------------------------------------------------------------------------------

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${APP_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${APP_DATABASE_PASSWORD}
      POSTGRES_DB: ${APP_DATABASE_DATABASE}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - intranet
    volumes:
      - "gosvelte-postgres:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 10s
      timeout: 5s
      retries: 5
